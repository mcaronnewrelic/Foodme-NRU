version: '3.8'

services:
  # Main FoodMe application service
  foodme:
    build: .
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - DOCKER_COMPOSE=true
      - DB_HOST=db
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    networks:
      - foodme_network

  # Nginx reverse proxy with HTTPS support
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx-foodme
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-./}:/workspaces
      - type: bind
        source: .setup/nginx/foodme.local.conf
        target: /etc/nginx/conf.d/foodme.conf
        read_only: true
      - type: bind
        source: .setup/certs/foodme.local.crt
        target: /etc/nginx/certs/foodme.crt
        read_only: true
      - type: bind
        source: .setup/certs/foodme.local.key
        target: /etc/nginx/certs/foodme.key
        read_only: true
    networks:
      - foodme_network
    depends_on:
      - foodme
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # PostgreSQL database
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    environment:
      - POSTGRES_DB=foodme
      - POSTGRES_USER=foodme_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - "5432"
    networks:
      - foodme_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d foodme -U foodme_user"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Alternative: explicit environment variables (override .env)
  foodme-env-vars:
    build: .
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      # Pass environment variables from host or .env file
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
      - NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY}
      - NEW_RELIC_APP_NAME=${NEW_RELIC_APP_NAME:-FoodMe-App}
    restart: unless-stopped
    networks:
      - foodme_network

  # Example with Docker secrets (for Docker Swarm) - DISABLED FOR TESTING
  # foodme-with-secrets:
  #   build: .
  #   ports:
  #     - "3002:3000"
  #   environment:
  #     - NODE_ENV=production
  #     - NEW_RELIC_APP_NAME=FoodMe-App-Secrets
  #   secrets:
  #     - new_relic_license_key
  #     - new_relic_api_key
  #   restart: unless-stopped
  #   networks:
  #     - foodme_network
  #   deploy:
  #     replicas: 1

# Docker volumes for persistent data
volumes:
  db-data:
    driver: local

# Docker networks
networks:
  foodme_network:
    driver: bridge

# Define secrets for Docker Swarm and database
secrets:
  # new_relic_license_key:
  #   external: true
  # new_relic_api_key:
  #   external: true
  db-password:
    file: db/password.txt
