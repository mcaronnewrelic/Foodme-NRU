services:
  # Main FoodMe application service
  foodme:
    build: .
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - DOCKER_COMPOSE=true
      - DB_HOST=db
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    networks:
      - foodme_network

  # Nginx reverse proxy with HTTPS support
  nginx:
    build:
      context: .
      dockerfile: nginx.dockerfile
    container_name: nginx-foodme
    restart: unless-stopped
    ports:
      - "80:80"
      # HTTPS disabled for dev container
      # - "443:443"
    # No volume mounts needed - config is baked into the image
    networks:
      - foodme_network
    depends_on:
      - foodme
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # PostgreSQL database
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      # Init scripts temporarily disabled for dev container
      # - ./db/init:/docker-entrypoint-initdb.d:ro
    environment:
      - POSTGRES_DB=foodme
      - POSTGRES_USER=foodme_user
      - POSTGRES_PASSWORD=foodme_secure_password_2025!
    expose:
      - "5432"
    networks:
      - foodme_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d foodme -U foodme_user"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Alternative: explicit environment variables (override .env)
  # foodme-env-vars:
  #   build: .
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - NODE_ENV=production
  #     # Pass environment variables from host or .env file
  #     - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
  #     - NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY}
  #     - NEW_RELIC_APP_NAME=${NEW_RELIC_APP_NAME}
  #   restart: unless-stopped
  #   networks:
  #     - foodme_network

  # New Relic Infrastructure Agent for container monitoring
  newrelic-infra:
    image: newrelic/infrastructure:latest
    container_name: newrelic-infra
    restart: unless-stopped
    # Full capabilities for non-devcontainer usage
    cap_add:
      - SYS_PTRACE
    pid: host
    privileged: true
    volumes:
      # Full volume mounts for comprehensive monitoring
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/:/host:ro"
      - "./newrelic-integrations:/etc/newrelic-infra/integrations.d:ro"
    environment:
      - NRIA_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
      - NRIA_DISPLAY_NAME=FoodMe-Infrastructure-Host
      - NRIA_VERBOSE=1
      # Enable full monitoring capabilities
      - NRIA_ENABLE_PROCESS_METRICS=true
      - NRIA_DOCKER_LABELS=true
      # Custom attributes for easier filtering in New Relic
      - NRIA_CUSTOM_ATTRIBUTES={"environment":"host","application":"foodme"}
    networks:
      - foodme_network

  # Example with Docker secrets (for Docker Swarm) - DISABLED FOR TESTING
  # foodme-with-secrets:
  #   build: .
  #   ports:
  #     - "3002:3000"
  #   environment:
  #     - NODE_ENV=production
  #     - NEW_RELIC_APP_NAME=FoodMe-App-Secrets
  #   secrets:
  #     - new_relic_license_key
  #     - new_relic_api_key
  #   restart: unless-stopped
  #   networks:
  #     - foodme_network
  #   deploy:
  #     replicas: 1

# Docker volumes for persistent data
volumes:
  db-data:
    driver: local

# Docker networks
networks:
  foodme_network:
    driver: bridge
