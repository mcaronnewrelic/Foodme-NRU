AWSTemplateFormatVersion: '2010-09-09'
Description: 'FoodMe Full Stack Application - Angular Frontend, Node.js Backend, and PostgreSQL Database'

Parameters:
  Environment:
    Type: String
    Default: staging
    AllowedValues: [staging, production]
    Description: Environment name for resource naming and configuration
    
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues: [t3.small, t3.medium, t3.large, t3.xlarge]
    Description: EC2 instance type for the application server
    
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access to the instance
    
  AllowedCidrBlocks:
    Type: CommaDelimitedList
    Default: "0.0.0.0/0"
    Description: CIDR blocks allowed to access the application
    
  ApplicationVersion:
    Type: String
    Default: latest
    Description: Version tag for the application deployment
    
  DatabasePassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Password for the PostgreSQL database
    
  NewRelicLicenseKey:
    Type: String
    NoEcho: true
    Default: ""
    Description: New Relic License Key (optional - leave empty to disable New Relic)
    
  NodeEnvironment:
    Type: String
    Default: production
    AllowedValues: [development, production]
    Description: Node.js environment setting
    
  S3BucketName:
    Type: String
    Description: S3 bucket name containing the application code

Resources:
  # VPC and Networking Resources
  ApplicationVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-foodme-vpc'
        - Key: Environment
          Value: !Ref Environment

  ApplicationSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-foodme-subnet'
        - Key: Environment
          Value: !Ref Environment

  ApplicationInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-foodme-igw'
        - Key: Environment
          Value: !Ref Environment

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ApplicationVPC
      InternetGatewayId: !Ref ApplicationInternetGateway

  ApplicationRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ApplicationVPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-foodme-rt'
        - Key: Environment
          Value: !Ref Environment

  ApplicationRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref ApplicationRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ApplicationInternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet
      RouteTableId: !Ref ApplicationRouteTable

  # Security Groups
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for FoodMe application server
      VpcId: !Ref ApplicationVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Select [0, !Ref AllowedCidrBlocks]
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access for Angular app
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access for Angular app
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          Description: Node.js API server
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.1.0/24
          Description: PostgreSQL database access from subnet
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-foodme-sg'
        - Key: Environment
          Value: !Ref Environment

  # IAM Role and Instance Profile
  ApplicationInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-foodme-instance-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3BucketName}'
                  - !Sub 'arn:aws:s3:::${S3BucketName}/*'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ApplicationInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${Environment}-foodme-instance-profile'
      Roles:
        - !Ref ApplicationInstanceRole

  # EC2 Instance
  ApplicationInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64}}'
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref ApplicationSubnet
      SecurityGroupIds:
        - !Ref ApplicationSecurityGroup
      IamInstanceProfile: !Ref ApplicationInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          
          # Log all output
          exec > >(tee /var/log/user-data.log) 2>&1
          
          # Download and execute installation script
          echo "Downloading FoodMe installation script..."
          curl -fsSL -o /tmp/install-foodme.sh "https://raw.githubusercontent.com/mcaronnewrelic/Foodme-NRU/main/cloudformation/install-foodme.sh"
          chmod +x /tmp/install-foodme.sh
          
          # Execute installation with parameters
          echo "Starting FoodMe installation..."
          /tmp/install-foodme.sh "${DatabasePassword}" "${S3BucketName}" "${NewRelicLicenseKey}" "${Environment}" "${NodeEnvironment}"
          
          echo "Installation completed successfully!"
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-foodme-app-server'
        - Key: Environment  
          Value: !Ref Environment
        - Key: Application
          Value: FoodMe

Outputs:
  InstanceId:
    Description: Instance ID of the application server
    Value: !Ref ApplicationInstance
    Export:
      Name: !Sub '${Environment}-foodme-instance-id'

  PublicIpAddress:
    Description: Public IP address of the application server
    Value: !GetAtt ApplicationInstance.PublicIp
    Export:
      Name: !Sub '${Environment}-foodme-public-ip'

  ApplicationUrl:
    Description: URL to access the FoodMe application
    Value: !Sub 'http://${ApplicationInstance.PublicIp}'
    Export:
      Name: !Sub '${Environment}-foodme-application-url'

  DatabaseEndpoint:
    Description: PostgreSQL database endpoint
    Value: !Sub '${ApplicationInstance.PrivateIp}:5432'
    Export:
      Name: !Sub '${Environment}-foodme-database-endpoint'

  SecurityGroupId:
    Description: Security Group ID for the application
    Value: !Ref ApplicationSecurityGroup
    Export:
      Name: !Sub '${Environment}-foodme-security-group-id'

  VpcId:
    Description: VPC ID for the application
    Value: !Ref ApplicationVPC
    Export:
      Name: !Sub '${Environment}-foodme-vpc-id'
