services:
  # Main FoodMe application service
  foodme:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: foodme-app
    ports:
      - "${FOODME_PORT:-3000}:3000"
    env_file:
      - ../.env
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST:-db}
      - TINI_SUBREAPER=1
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    networks:
      - foodme_network

  # Nginx reverse proxy with HTTPS support
  nginx:
    build:
      context: ..
      dockerfile: docker/nginx.dockerfile
    container_name: foodme-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    # No volume mounts needed - config is baked into the image
    environment:
      - TINI_SUBREAPER=1
    networks:
      - foodme_network
    depends_on:
      - foodme
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1/nginx-health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-10s}

  # PostgreSQL database
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    user: postgres
    container_name: foodme-db
    env_file:
      - ../.env  
    volumes:
      - db-data:/var/lib/postgresql/data
      # Init scripts temporarily disabled for dev container
      - ../db/init:/docker-entrypoint-initdb.d:ro
    environment:
      - POSTGRES_DB=${DB_NAME:-foodme}
      - POSTGRES_USER=${DB_USER:-foodme_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-foodme_secure_password_2025!}
      - TINI_SUBREAPER=1
    expose:
      - "5432"
    networks:
      - foodme_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d foodme -U foodme_user"]
      interval: ${DB_HEALTH_INTERVAL:-10s}
      timeout: ${DB_HEALTH_TIMEOUT:-5s}
      retries: ${DB_HEALTH_RETRIES:-5}
      start_period: ${DB_HEALTH_START_PERIOD:-30s}

  # Alternative: explicit environment variables (override .env)
  # foodme-env-vars:
  #   build: .
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - NODE_ENV=production
  #     # Pass environment variables from host or .env file
  #     - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
  #     - NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY}
  #     - NEW_RELIC_APP_NAME=${NEW_RELIC_APP_NAME}
  #   restart: unless-stopped
  #   networks:
  #     - foodme_network

  # New Relic Infrastructure Agent for container monitoring
  newrelic-infra:
    build:
      context: ..
      dockerfile: docker/newrelic-infra.dockerfile
    container_name: foodme-infra
    restart: unless-stopped
    # Full capabilities for non-devcontainer usage
    env_file:
      - ../.env
    cap_add:
      - SYS_PTRACE
      - CAP_DAC_READ_SEARCH
      - DAC_READ_SEARCH
      - SYS_ADMIN
    pid: host
    privileged: true
    user: root
    depends_on:
      - foodme
      - db
      - nginx
    volumes:
      # Full volume mounts for comprehensive monitoring
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/:/host:ro"
      - "../newrelic-integrations:/etc/newrelic-infra/integrations.d:ro"
    environment:
      - TINI_SUBREAPER=1
      - NRIA_DISPLAY_NAME=${MONITORING_DISPLAY_NAME:-FoodMe-Infrastructure}
      - NRIA_VERBOSE=${MONITORING_VERBOSE:-1}
      # Enable full monitoring capabilities
      - NRIA_ENABLE_PROCESS_METRICS=true
      - NRIA_DOCKER_LABELS=true
      # Custom attributes for easier filtering in New Relic
      - NRIA_CUSTOM_ATTRIBUTES={"environment":"host","application":"foodme"}
    networks:
      - foodme_network

  # Example with Docker secrets (for Docker Swarm) - DISABLED FOR TESTING
  # foodme-with-secrets:
  #   build: .
  #   ports:
  #     - "3002:3000"
  #   environment:
  #     - NODE_ENV=production
  #     - NEW_RELIC_APP_NAME=FoodMe-App-Secrets
  #   secrets:
  #     - new_relic_license_key
  #     - new_relic_api_key
  #   restart: unless-stopped
  #   networks:
  #     - foodme_network
  #   deploy:
  #     replicas: 1

# Docker volumes for persistent data
volumes:
  db-data:
    driver: local
    name: foodme-db-data

# Docker networks
networks:
  foodme_network:
    driver: bridge
    name: foodme_network

