{
  "name": "foodme",
  "version": "1.0.0",
  "description": "NRU tutorial",
  "keywords": [],
  "homepage": "http://foodme.nru.to/",
  "repository": {
    "type": "git",
    "url": "git://github.com/newrelicuniversity/foodme.git"
  },
  "author": "NRU Team",
  "contributors": [
    "Michael Caron <mcaron@newrelic.com>"
  ],
  "main": "server/start.js",
  "scripts": {
    "install:all": "npm install && cd angular-app && npm install",
    "build:angular": "cd angular-app && npm run build",
    "build": "npm run build:angular && cp -r server dist/",
    "start": "npm run build:angular && node -r newrelic server/start.js --env-file=.env",
    "start:prod": "NODE_ENV=production node -r newrelic dist/server/start.js --env-file=.env",
    "dev": "npm run build:angular && node --env-file=.env server/start.js",
    "dev:watch": "npm run build:angular && concurrently \"cd angular-app && npm run build -- --watch\" \"nodemon --env-file=.env server/start.js\"",
    "stop": "pkill --signal SIGINT node",
    "loadtest": ".venv/bin/locust -f locustfile.py --host=http://localhost:3000",
    "loadtest:headless": ".venv/bin/locust -f locustfile.py --host=http://localhost:3000 --headless -u 10 -r 2 -t 60s",
    "loadtest:web": ".venv/bin/locust -f locustfile.py --host=http://localhost:3000 --web-host=0.0.0.0 --web-port=8089",
    "newrelic:deployment": "USER=$(git config user.name) && CHANGELOG=$(git log --oneline -1) && COMMIT=$(git rev-parse HEAD) && curl -X POST https://api.newrelic.com/graphql -H 'Content-Type: application/json' -H 'API-Key: $NEW_RELIC_API_KEY' --data-raw '{\"query\":\"mutation { changeTrackingCreateDeployment(deployment: {description: \\\"FoodMe Node.js Server Deployment\\\", user: \\\"'$USER'\\\", changelog: \\\"'$CHANGELOG'\\\", commit: \\\"'$COMMIT'\\\", deploymentType: BASIC}) { deploymentId } }\"}'",
    "docker:build": "docker build -t foodme:latest .",
    "docker:run": "docker run -p 3000:3000 --env-file .env foodme:latest",
    "docker:run:prod": "docker run -p 3000:3000 -e NODE_ENV=production -e NEW_RELIC_LICENSE_KEY=\"$NEW_RELIC_LICENSE_KEY\" -e NEW_RELIC_API_KEY=\"$NEW_RELIC_API_KEY\" foodme:latest",
    "docker:compose": "docker-compose up --build",
    "docker:compose:prod": "docker-compose up --build foodme",
    "docker:compose:dev": "docker compose -f docker-compose.yml -f docker-compose.dev.yml up -d",
    "docker:compose:loadtest": "docker compose -f docker-compose.loadtest.yml up",
    "docker:dev:logs": "docker compose -f docker-compose.dev.yml logs -f",
    "docker:dev:down": "docker compose -f docker-compose.dev.yml down",
    "docker:loadtest:logs": "docker compose -f docker-compose.loadtest.yml logs -f locust",
    "docker:loadtest:down": "docker compose -f docker-compose.loadtest.yml down",
    "docker:with-secrets": "./run-with-secrets.sh",
    "setup:env": "cp .env.example .env && echo 'Please edit .env with your actual values'",
    "validate:env": "test -f .env && echo '✅ .env file exists' || echo '❌ .env file missing - run: npm run setup:env'",
    "db:generate-import-uuid": "node db/scripts/import-restaurants-uuid.js",
    "db:test": "node db/scripts/test-database.js",
    "db:connect": "docker compose exec db psql -U foodme_user -d foodme",
    "db:backup": "docker compose exec db pg_dump -U foodme_user foodme > backup_$(date +%Y%m%d_%H%M%S).sql",
    "db:restore": "cat backup.sql | docker compose exec -T db psql -U foodme_user -d foodme",
    "db:logs": "docker compose logs db",
    "deploy": "./deploy.sh",
    "deploy:build": "./deploy.sh --build",
    "deploy:marker": "./deploy.sh --marker",
    "deploy:start": "./deploy.sh --start",
    "deploy:test": "./deploy.sh --loadtest",
    "security:validate": "./validate-security.sh",
    "security:docker": "docker run --rm -i hadolint/hadolint < dockerfile"
  },
  "dependencies": {
    "body-parser": "^1.20.0",
    "csv": ">=0.2.1",
    "express": "^5.1.0",
    "express-handlebars": "^8.0.2",
    "morgan": "^1.10.0",
    "newrelic": "^12.21.0",
    "open": "^8.4.2",
    "pg": "^8.12.0",
    "pino": "^8.7.0",
    "uuid": "^9.0.1"
  },
  "engines": {
    "node": ">=20.14.0"
  },
  "license": "MIT"
}